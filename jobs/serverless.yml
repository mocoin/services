# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: mocoin-jobs

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage}
  region: ap-northeast-1
  timeout: 10 # optional, in seconds, default is 6

# you can define service wide environment variables here
  environment:
    MONGOLAB_URI: ${env:MONGOLAB_URI_${opt:stage}}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID_${opt:stage}}
    COGNITO_REGION: ${env:COGNITO_REGION_${opt:stage}}
    DEBUG: ${env:DEBUG_${opt:stage}}
    REDIS_HOST: ${env:REDIS_HOST_${opt:stage}}
    REDIS_KEY: ${env:REDIS_KEY_${opt:stage}}
    REDIS_PORT: ${env:REDIS_PORT_${opt:stage}}
    COIN_API_AUTHORIZE_SERVER_DOMAIN: ${env:COIN_API_AUTHORIZE_SERVER_DOMAIN_${opt:stage}}
    COIN_API_CLIENT_ID: ${env:COIN_API_CLIENT_ID_${opt:stage}}
    COIN_API_CLIENT_SECRET: ${env:COIN_API_CLIENT_SECRET_${opt:stage}}
    COIN_API_ENDPOINT: ${env:COIN_API_ENDPOINT_${opt:stage}}
    BANK_API_AUTHORIZE_SERVER_DOMAIN: ${env:BANK_API_AUTHORIZE_SERVER_DOMAIN_${opt:stage}}
    BANK_API_CLIENT_ID: ${env:BANK_API_CLIENT_ID_${opt:stage}}
    BANK_API_CLIENT_SECRET: ${env:BANK_API_CLIENT_SECRET_${opt:stage}}
    BANK_API_ENDPOINT: ${env:BANK_API_ENDPOINT_${opt:stage}}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

custom:
  splitStacks:
    perFunction: false
    perType: true

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-offline
  - serverless-plugin-split-stacks

functions:
  abortTasks:
    handler: dst/tasks/abortTasks.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  cancelMoneyTransfer:
    handler: dst/tasks/cancelMoneyTransfer.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  makeTransactionExpired:
    handler: dst/tasks/makeTransactionExpired.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  moneyTransfer:
    handler: dst/tasks/moneyTransfer.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  onCanceledCoinTransaction:
    handler: dst/tasks/onCanceledCoinTransaction.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  onExpiredCoinTransaction:
    handler: dst/tasks/onExpiredCoinTransaction.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  onConfirmedBuyCoinTransaction:
    handler: dst/tasks/onConfirmedBuyCoinTransaction.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  onConfirmedDepositCoinTransaction:
    handler: dst/tasks/onConfirmedDepositCoinTransaction.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  onConfirmedReturnCoinTransaction:
    handler: dst/tasks/onConfirmedReturnCoinTransaction.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  onConfirmedTransferCoinTransaction:
    handler: dst/tasks/onConfirmedTransferCoinTransaction.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  onConfirmedWithdrawCoinTransaction:
    handler: dst/tasks/onConfirmedWithdrawCoinTransaction.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  reexportTransactionTasks:
    handler: dst/tasks/reexportTransactionTasks.default
    timeout: 300
    events:
      - schedule: rate(1 minute)
  retryTasks:
    handler: dst/tasks/retryTasks.default
    timeout: 300
    events:
      - schedule: rate(1 minute)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
